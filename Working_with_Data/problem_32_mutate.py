# Write a function mutate to compute all words generated by a single mutation on a given word.
# A mutation is defined as inserting a character, deleting a character, replacing a character, 
# or swapping 2 consecutive characters in a string. For simplicity consider only letters from a to z.

ret = []
w = []
b = []
a = []
s = []
ml = []
l = []
t = ''
clen = 0
def mutate(d):
   clen = len(d)
# creating a list of alphabets from a to z
   alp=map(chr,range(97,123))
   for i in alp:
      a.append(i)
   s=[]
   for i in range(clen):
      s.append(d[i])
# inserting values
   for i in a:
      for j in range(clen):
         if j < (clen):
            s.insert(j,i)
            ml.append(s)
            #print(s)
            s = []
            for x in range(clen):
               s.append(d[x])
         if j == (clen -1):
            s.append(i)
            ml.append(s)
            s = []
            for x in range(clen):
               s.append(d[x])      
#removing any one value at a time
   for p in range(clen):
      s = []
      w = []
      for r in range(clen):
         s.append(d[r])
         w.append(d[r])
      s.remove(w[p])
      ml.append(s)
# replacing a value with any value in a to z
   s= []
   for q in range(clen):
      s.append(d[q])      
   for e in a:
      for f in range(clen):
         s[f] = e
         #print(s)
         ml.append(s)
         s = []
         for o in range(clen):
            s.append(d[o]) 

# swapping any two concecutive characters.

   for t in range(clen):
      if(t < (clen -1)):
         temp = s[t]
         s[t] = s[t+1]
         s[t+1] = temp
         ml.append(s)
         #print(s)
         s = []
         for t1 in range(clen):
            s.append(d[t1])

# converting list into string. 
   for val in ml:
      ret.append(("").join(val)) 
   return ret


print ('hlelo' in mutate('hello'))
print ('helo' in mutate('hello'))
print ('helldo' in mutate('hello'))
print ('hllo' in mutate('hello'))
print ('hlo' in mutate('hello'))
   
